#!/bin/bash
# Ubuntu-Compatible Rice Installer

# Colors
CRE=$(tput setaf 1)    # Red
CYE=$(tput setaf 3)    # Yellow
CGR=$(tput setaf 2)    # Green
CBL=$(tput setaf 4)    # Blue
BLD=$(tput bold)       # Bold
CNC=$(tput sgr0)       # Reset

# Globals
ERROR_LOG="$HOME/RiceError.log"
backup_folder="$HOME/.RiceBackup"

# Functions
logo() {
    text="$1"
    printf "\n${BLD}${CRE}[ ${CYE}${text} ${CRE}]${CNC}\n\n"
}

log_error() {
    echo "[$(date)] ERROR: $1" >> "$ERROR_LOG"
    echo "${CRE}${BLD}ERROR:${CNC} $1" >&2
}

is_installed() {
    dpkg -l | grep -qw "$1"
}

initial_checks() {
    if [ "$(id -u)" = 0 ]; then
        log_error "This script MUST NOT be run as root."
        exit 1
    fi

    if [ "$PWD" != "$HOME" ]; then
        log_error "Run this script from your HOME directory."
        exit 1
    fi

    if ! ping -q -c 1 -W 1 8.8.8.8 >/dev/null; then
        log_error "No internet connection."
        exit 1
    fi
}

welcome() {
    clear
    logo "Welcome $USER"
    echo "This script installs my dotfiles and configures your environment."
    echo "It installs dependencies, backups configs, applies themes, and sets up zsh."

    while :; do
        read -rp "${BLD}${CGR}Continue?${CNC} [y/N]: " yn
        case $yn in
            [Yy]*) break;;
            [Nn]*|"") echo "${CYE}Cancelled.${CNC}"; exit;;
            *) echo "${CRE}Please answer y or n.${CNC}";;
        esac
    done
}

install_dependencies() {
    clear
    logo "Installing dependencies"
    sleep 1

    sudo apt update

    dependencies="alacritty build-essential bat brightnessctl bspwm dunst feh fzf thunar gvfs-backends firefox geany git imagemagick jq kitty maim mpd mpv neovim ncmpcpp npm pamixer papirus-icon-theme picom playerctl polybar policykit-1 python3-gi redshift rofi rustc cargo sxhkd tmux xclip x11-utils x11-xserver-utils xrandr xdotool xsettingsd fonts-inconsolata fonts-jetbrains-mono fonts-ubuntu"

    missing=""
    for pkg in $dependencies; do
        if ! is_installed "$pkg"; then
            echo "${CYE}$pkg not installed${CNC}"
            missing+="$pkg "
        else
            echo "${CGR}$pkg already installed${CNC}"
        fi
    done

    if [ -n "$missing" ]; then
        echo "${CYE}Installing missing packages...${CNC}"
        sudo apt install -y $missing
    else
        echo "${CGR}All dependencies are already installed.${CNC}"
    fi
    sleep 2
}

clone_dotfiles() {
    clear
    logo "Cloning dotfiles"
    repo_url="https://github.com/gh0stzk/dotfiles"
    repo_dir="$HOME/dotfiles"

    if [ -d "$repo_dir" ]; then
        mv "$repo_dir" "${repo_dir}_$(date +%s)"
    fi

    git clone --depth=1 "$repo_url" "$repo_dir"
}

backup_existing_config() {
    clear
    logo "Backing up configs"
    mkdir -p "$backup_folder"

    config_folders="bspwm alacritty picom rofi sxhkd dunst kitty polybar geany gtk-3.0 ncmpcpp yazi tmux zsh mpd"

    for folder in $config_folders; do
        [ -d "$HOME/.config/$folder" ] && mv "$HOME/.config/$folder" "$backup_folder/${folder}_$(date +%s)"
    done

    for file in .zshrc .gtkrc-2.0; do
        [ -f "$HOME/$file" ] && mv "$HOME/$file" "$backup_folder/${file}_$(date +%s)"
    done

    echo "${CGR}Backup complete.${CNC}"
    sleep 1
}

install_dotfiles() {
    clear
    logo "Installing dotfiles"

    src="$HOME/dotfiles"
    cp -r "$src/config"/* "$HOME/.config/"
    cp "$src/home/.zshrc" "$HOME/.zshrc"
    cp "$src/home/.gtkrc-2.0" "$HOME/.gtkrc-2.0"
    cp -r "$src/home/.icons" "$HOME/.icons"

    mkdir -p "$HOME/.local/share"
    cp -r "$src/misc/startup-page" "$HOME/.local/share/"
    cp -r "$src/misc/fonts" "$HOME/.local/share/"

    fc-cache -rv
    xdg-user-dirs-update

    echo "${CGR}Dotfiles installed.${CNC}"
    sleep 1
}

configure_services() {
    clear
    logo "Configuring services"
    systemctl --user enable --now mpd.service || log_error "Failed to enable MPD"
    sleep 1
}

change_default_shell() {
    logo "Changing shell to zsh"
    if command -v zsh >/dev/null; then
        chsh -s $(command -v zsh)
        echo "${CGR}Shell changed to zsh.${CNC}"
    else
        log_error "Zsh not found."
    fi
    sleep 1
}

final_prompt() {
    clear
    logo "All done!"
    echo "${CGR}Installation complete. Reboot to apply changes.${CNC}"
    read -rp "Reboot now? [y/N]: " yn
    case $yn in
        [Yy]*) sudo reboot;;
        *) echo "${CYE}Please reboot later to apply changes.${CNC}";;
    esac
}

# Main
initial_checks
welcome
install_dependencies
clone_dotfiles
backup_existing_config
install_dotfiles
configure_services
change_default_shell
final_prompt
